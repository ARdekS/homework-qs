// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARdekS/homework-qs/interfaces (interfaces: Node)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	interfaces "github.com/ARdekS/homework-qs/interfaces"
	gomock "github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// AddChild mocks base method.
func (m *MockNode) AddChild() interfaces.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChild")
	ret0, _ := ret[0].(interfaces.Node)
	return ret0
}

// AddChild indicates an expected call of AddChild.
func (mr *MockNodeMockRecorder) AddChild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChild", reflect.TypeOf((*MockNode)(nil).AddChild))
}

// Copy mocks base method.
func (m *MockNode) Copy() interfaces.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(interfaces.Node)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockNodeMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockNode)(nil).Copy))
}

// Edit mocks base method.
func (m *MockNode) Edit(arg0 interfaces.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Edit", arg0)
}

// Edit indicates an expected call of Edit.
func (mr *MockNodeMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockNode)(nil).Edit), arg0)
}
